from pyrogram import Client, filters
from pyrogram.types import Message, InputMediaDocument
import logging
from models.case import Case
from models.evidence import Evidence
from utils.helpers import format_timestamp
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, PageBreak, Image as RLImage
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.enums import TA_CENTER
from reportlab.lib.units import inch
import os
from io import BytesIO # Untuk menangani gambar dalam memori jika diperlukan

log = logging.getLogger(__name__)

# Fungsi pembantu untuk menghasilkan laporan (bisa dipanggil dari command atau callback)
async def generate_report_for_case(client: Client, chat_id: int, case_id: str):
    case = await Case.get_case(case_id)

    if not case:
        await client.send_message(chat_id, "Case not found.")
        return

    evidence_list = await Evidence.get_evidence_by_case(case_id)

    # Generate PDF Report
    pdf_filename = f"report_{case.case_id}.pdf"
    doc = SimpleDocTemplate(pdf_filename, pagesize=letter)
    styles = getSampleStyleSheet()
    
    # Custom styles
    styles.add(ParagraphStyle(name='CenteredTitle', alignment=TA_CENTER, fontSize=24, spaceAfter=14))
    styles.add(ParagraphStyle(name='SectionTitle', fontSize=18, spaceAfter=10, textColor='#333333'))
    styles.add(ParagraphStyle(name='SubSectionTitle', fontSize=14, spaceAfter=8, textColor='#555555'))
    styles.add(ParagraphStyle(name='NormalIndent', fontSize=10, leading=12, leftIndent=20))
    styles.add(ParagraphStyle(name='EvidenceContent', fontSize=9, leading=11, fontName='Courier', backColor='#EEEEEE', borderPadding=5, borderRadius=3))

    story = []

    # Title Page
    story.append(Paragraph(f"Investigation Report", styles['CenteredTitle']))
    story.append(Paragraph(f"Case: {case.title}", styles['h2']))
    story.append(Spacer(1, 0.2 * inch))
    story.append(Paragraph(f"Case ID: {case.case_id}", styles['h3']))
    story.append(Paragraph(f"Created By: {case.created_by}", styles['h3']))
    story.append(Paragraph(f"Created On: {format_timestamp(case.created_at)}", styles['h3']))
    story.append(Spacer(1, 0.5 * inch))
    story.append(Paragraph("Generated by Aetherbot OSINT & Investigation System", styles['Normal']))
    story.append(PageBreak())

    # Case Details
    story.append(Paragraph("Case Details", styles['SectionTitle']))
    story.append(Spacer(1, 0.1 * inch))
    story.append(Paragraph(f"<b>Title:</b> {case.title}", styles['Normal']))
    story.append(Paragraph(f"<b>Status:</b> {case.status.capitalize()}", styles['Normal']))
    story.append(Paragraph(f"<b>Description:</b> {case.description if case.description else 'N/A'}", styles['Normal']))
    story.append(Spacer(1, 0.2 * inch))

    # Evidence List
    story.append(Paragraph("Evidence List", styles['SectionTitle']))
    story.append(Spacer(1, 0.1 * inch))

    if not evidence_list:
        story.append(Paragraph("No evidence added to this case.", styles['Normal']))
    else:
        for i, evidence in enumerate(evidence_list):
            story.append(Paragraph(f"<b>{i+1}. Evidence Type: {evidence.type.capitalize()}</b>", styles['SubSectionTitle']))
            story.append(Paragraph(f"   <b>Evidence ID:</b> {evidence.evidence_id}", styles['NormalIndent']))
            story.append(Paragraph(f"   <b>Added By:</b> {evidence.added_by}", styles['NormalIndent']))
            story.append(Paragraph(f"   <b>Added On:</b> {format_timestamp(evidence.added_at)}", styles['NormalIndent']))
            
            # Display content based on type
            if evidence.type == "photo" and "file_path" in evidence.metadata:
                try:
                    img_path = evidence.metadata["file_path"]
                    if os.path.exists(img_path):
                        img = RLImage(img_path)
                        img_width = 2 * inch
                        img_height = img_width * (img.drawHeight / img.drawWidth)
                        if img_height > 3 * inch: # Batasi tinggi gambar
                            img_height = 3 * inch
                            img_width = img_height * (img.drawWidth / img.drawHeight)
                        img.drawWidth = img_width
                        img.drawHeight = img_height
                        story.append(Paragraph("   <b>Image:</b>", styles['NormalIndent']))
                        story.append(img)
                    else:
                        story.append(Paragraph(f"   <b>Content:</b> [Image file not found: {img_path}]", styles['NormalIndent']))
                except Exception as img_e:
                    log.error(f"Error embedding image {evidence.metadata.get('file_path')}: {img_e}")
                    story.append(Paragraph(f"   <b>Content:</b> [Error loading image: {img_e}]", styles['NormalIndent']))
            elif evidence.type == "document" and "file_path" in evidence.metadata:
                story.append(Paragraph(f"   <b>Document:</b> {evidence.metadata.get('file_name', 'N/A')} (Path: {evidence.metadata.get('file_path', 'N/A')})", styles['NormalIndent']))
            elif evidence.type == "link" and "url" in evidence.metadata:
                story.append(Paragraph(f"   <b>Link:</b> <link href='{evidence.metadata['url']}'>{evidence.metadata['url']}</link>", styles['NormalIndent']))
                if evidence.metadata.get('title'):
                    story.append(Paragraph(f"   <b>Link Title:</b> {evidence.metadata['title']}", styles['NormalIndent']))
                if evidence.metadata.get('description'):
                    story.append(Paragraph(f"   <b>Link Description:</b> {evidence.metadata['description']}", styles['NormalIndent']))
            else:
                story.append(Paragraph(f"   <b>Content:</b> {evidence.content}", styles['EvidenceContent']))
            
            if evidence.description:
                story.append(Paragraph(f"   <b>Description:</b> {evidence.description}", styles['NormalIndent']))
            if evidence.metadata and not (evidence.type in ["photo", "document", "link"] and ("file_path" in evidence.metadata or "url" in evidence.metadata)):
                # Tampilkan metadata umum jika tidak ditangani di atas
                story.append(Paragraph(f"   <b>Metadata:</b> {json.dumps(evidence.metadata)}", styles['NormalIndent']))
            story.append(Spacer(1, 0.2 * inch))

    try:
        doc.build(story)
        await client.send_document(
            chat_id=chat_id,
            document=pdf_filename,
            caption=f"Investigation report for case `{case.title}` (ID: `{case.case_id}`)."
        )
        log.info(f"Report generated and sent for case {case.case_id} to chat {chat_id}")
    except Exception as e:
        log.error(f"Error generating or sending PDF report for case {case.case_id}: {e}")
        await client.send_message(chat_id, f"Failed to generate or send PDF report: {e}")
    finally:
        if os.path.exists(pdf_filename):
            os.remove(pdf_filename) # Clean up the temporary PDF file

# Command handler untuk memicu pembuatan laporan
@Client.on_message(filters.command("report") & filters.private)
async def report_command_handler(client: Client, message: Message):
    args = message.command
    if len(args) < 2:
        await message.reply_text("Usage: `/report <case_id>`")
        return

    case_id = args[1]
    # Verifikasi akses user ke kasus sebelum memicu laporan
    case = await Case.get_case(case_id)
    if not case or case.created_by != message.from_user.id:
        await message.reply_text("Case not found or you do not have access to this case.")
        return

    await message.reply_text(f"Generating report for case `{case.title}`...", quote=True)
    await generate_report_for_case(client, message.chat.id, case_id)

